<script>
    const socket = io.connect();

    // Identification

    socket.on('id', msg => {
        if (hasID()) {
            socket.emit('id', getID())
        } else {
            socket.emit('no id')
        }
    })

    socket.on('new id', msg => setID(msg));

    socket.on('id ok', msg => {
        console.log('session ID is ok');
        let split = document.URL.split('/')[3];
        if ((getGame() === null || getGame() === undefined) && (split === '' || split === '/')) {
            console.log('initializing game');
            startLobby();
        }
        if (msg !== undefined && msg !== null) {
            setGame(msg);
        }
    });

    const getID = () => {
        return localStorage.getItem('id');
    }

    const hasID = () => {
        return localStorage.getItem('id') !== null;
    }

    const setID = id => {
        localStorage.setItem('id', id);
    }

    // Tests

    const testConnection = () => {
        socket.emit('test');
    }

    socket.on('test', () => alert('test succeded'));

    // Settings

    const startLobby = () => {
        localStorage.setItem('lobby', true);
        socket.emit('new lobby', getID());
    }

    const updateSettings = (type, setting) => {
        socket.emit(`setting ${type}`, { id: getID(), setting: setting });
    }

    const setGame = game => localStorage.setItem('game', JSON.stringify(game));
    const getGame = () => {
        return JSON.parse(localStorage.getItem('game'));
    }

    socket.on('setting changes', game => setGame(game));

    socket.on('lobby', msg => setGame(msg));
    
    // Game

</script>