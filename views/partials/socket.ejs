<script>
    const socket = io.connect();

    // Identification

    socket.on('id', msg => {
        if (hasID()) {
            socket.emit('id', getID())
        } else {
            socket.emit('no id')
        }
    })

    socket.on('new id', msg => {
        setID(msg);
        location.reload();
    });

    socket.on('id ok', msg => {
        console.log('session ID is ok');
        let split = document.URL.split('/')[3];
        if ((getGame() === null || getGame() === undefined) && (split === '' || split === '/')) {
            console.log('initializing game');
            startLobby();
        }
        if (msg !== undefined && msg !== null) {
            setGame(msg);
        }
    });

    const getID = () => {
        return localStorage.getItem('id');
    }

    const hasID = () => {
        return localStorage.getItem('id') !== null;
    }

    const setID = id => {
        localStorage.setItem('id', id);
    }

    // Tests

    const testConnection = () => {
        socket.emit('test');
    }

    socket.on('test', () => alert('test succeded'));

    const getLatestGame = () => socket.emit('get game', getID());

    socket.on('game', game => setGame(game));

    // Settings

    const startLobby = () => {
        localStorage.setItem('lobby', true);
        socket.emit('new lobby', getID());
    }

    const updateSettings = (type, setting) => {
        socket.emit(`setting ${type}`, { id: getID(), setting: setting });
    }

    const setGame = game => localStorage.setItem('game', JSON.stringify(game));
    const getGame = () => {
        return JSON.parse(localStorage.getItem('game'));
    }

    const sendStartGameSignal = () => socket.emit('start game', getID());

    socket.on('setting changes', game => {
        setGame(game);
        console.log(game);
    });

    socket.on('lobby', msg => setGame(msg));

    const addList = list => socket.emit('setting list', { id: getID(), setting: list });

    const getLists = () => socket.emit('get lists');

    const sendNewList = () => socket.emit('new list', window.currentList);

    socket.on('lists', lists => {
        console.log(lists);
        localStorage.setItem('lists', JSON.stringify(lists));
    })
    
    // Game

    const scorePoint = () => socket.emit('score', getID());

    const retractPoint = () => socket.emit('undo score', getID());

    const getWords = (no) => {
        let amount = no || 5;
        let res = [];
        for (i = 0; i < amount; i++) {
            res.push(getWord());
        }
        return res;
    }

    const startTurn = team => socket.emit('start turn', team);

    const getWord = () => {
        let words = getGame().words;
        let randInt = randomInteger(0, words.length - 1);
        let word = words[randInt];
        delete words[randInt];
        getGame().words = words;
        return word;
    }

    const randomInteger = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }

    socket.on('game update', msg => {
        setGame(msg)
        console.log(msg);
    });


</script>